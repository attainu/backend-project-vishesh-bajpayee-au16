<div class="pomodoro">
  <h1 id="heading">Pomodoro</h1>
  <form action="/dashboard" method="GET">
    <button id="goback-btn">go back</button>
  </form>
  <div class="btn-wrapper">
    <div class="btn-position-wrapper">
      <button id="create-btn">Create</button>

    </div>
  </div>

  <div class="hidden-btn-position-wrapper">
    <div class="hidden-wrapper">
      <button id="custom-timer-btn" class="default-btn">custom</button>
      <button id="default-timer-btn" class="default-btn">default</button>
    </div>
  </div>

  <div class="hidden-set-timer-wrapper-position">
    <div class="hidden-set-timer-wrapper-flex">
      <div class="hidden-set-timer-wrapper">
        <h3>timer:
          <input
            placeholder="enter timer in minutes"
            type="number"
            name="timer"
            id="timer"
          /></h3>
        <h3>break: <input type="number" name="break" id="break" /></h3>
        <button id="begin-set">begin</button>
      </div>
    </div>
  </div>

  <div class="hidden-default-timer-wrapper-position">
    <div class="hidden-default-timer-wrapper-flex">
      <div class="hidden-default-timer-wrapper">
        <h3>timer: 25 minutes
        </h3>
        <h3>break: 5 minutes </h3>
        <button id="begin-default">begin</button>
      </div>
    </div>
  </div>

  <div class="timer-wrapper-position">
    <div class="timer-wrapper">
      <div class="timer-container">
        <h1 class="time-indicator">25</h1>
      </div>
      <div class="timer-container">
        <h1 class="time-indicator">25</h1>
      </div>
      <div class="timer-container">
        <h1 class="time-indicator">25</h1>
      </div>
      <div class="timer-container">
        <h1 class="time-indicator">25</h1>
      </div>
    </div>
  </div>

  <div class="break-wrapper-position">
    <div class="break-wrapper">
      <div class="break-container">
        <h4>5</h4>
      </div>
      <div class="break-container">
        <h4>5</h4>
      </div>
      <div class="break-container">
        <h4>5</h4>
      </div>
    </div>
  </div>

  <div id="finish-wrapper">
    <h1 id="finish-text">Pomodoro Completed</h1>
    <form action="/dashboard/pomodoro" method="POST">
      <button id="reset">reset</button>
    </form>
  </div>

</div>
<script>
  const createBtn = document.getElementById("create-btn"); const
  customDefaultBtn = document.querySelector(".hidden-btn-position-wrapper");
  const customTimerBtn = document.getElementById("custom-timer-btn"); const
  defaultTimerBtn = document.getElementById("default-timer-btn"); const
  hiddenSetTimer = document.querySelector( ".hidden-set-timer-wrapper-position"
  ); const hiddenDefaultTimer = document.querySelector(
  ".hidden-default-timer-wrapper-position" ); const beginSetBtn =
  document.getElementById("begin-set"); const beginDefaultBtn =
  document.getElementById("begin-default"); const setTimerInput =
  document.getElementById("timer"); const setBreakInput =
  document.getElementById("break"); const timerWrapper =
  document.querySelector(".timer-wrapper-position"); const breakWrapper =
  document.querySelector(".break-wrapper-position"); const breakContainer =
  document.querySelectorAll(".break-container"); const timeIndicator =
  document.querySelectorAll(".time-indicator"); const timerContainer =
  document.querySelectorAll(".timer-container"); const finishWrapper =
  document.getElementById("finish-wrapper"); const finishText =
  document.getElementById("finish-text"); const resetBtn =
  document.getElementById("reset"); const enableDisplay = function (clickBtn,
  displayDiv) { clickBtn.addEventListener("click", function () { if
  (displayDiv.style.display === "none") { displayDiv.style.display = "block";
  displayDiv.style.animation = "opacityup .2s ease-in "; } else {
  displayDiv.style.animation = "opacityup .2s linear"; } });
  displayDiv.style.display = "none"; }; const disableDisplay = function (button)
  { button.addEventListener("click", function () {
  customDefaultBtn.style.display = "none"; hiddenDefaultTimer.style.display =
  "none"; hiddenSetTimer.style.display = "none"; }); }; const setTimerFunc =
  function (timerVal, delay, index) { setTimeout(() => { let timerValue =
  timerVal; const timerIntervel = setInterval(() => { timerValue -= 1;
  timerContainer[index].setAttribute("class", "animation-class");
  timeIndicator[index].textContent = `${timerValue}`; if (timerValue == 0) {
  clearInterval(timerIntervel); timerContainer[index].style.background = "teal";
  } }, 1000); }, delay); }; const setBreakFunc = function (breakVal, delay,
  index) { let breakValue = breakVal; setTimeout(() => { const breakIntervel =
  setInterval(() => { breakValue -= 1; breakContainer[index].textContent =
  `${breakValue}`; if (breakValue == 0) { clearInterval(breakIntervel);
  breakContainer[index].style.background = "black";
  breakContainer[index].style.color = "white"; } }, 1000); }, delay); }; const
  finishFunc = function (delay) { setTimeout(() => { breakWrapper.style.display
  = "none"; timerWrapper.style.display = "none"; finishWrapper.style.display =
  "block"; }, delay); }; enableDisplay(createBtn, customDefaultBtn);
  enableDisplay(customTimerBtn, hiddenSetTimer); enableDisplay(defaultTimerBtn,
  hiddenDefaultTimer); disableDisplay(beginDefaultBtn);
  disableDisplay(beginSetBtn); //_______________________________________________
  beginDefaultBtn.addEventListener("click", async function () {
  timerWrapper.style.display = "block"; breakWrapper.style.display = "block";
  timerContainer[0].setAttribute("class", "animation-class");
  createBtn.setAttribute("disabled", true); createBtn.style.background = "gray";
  let timeValue = 10; const initialIntervel = setInterval(() => { timeValue -=
  1; timeIndicator[0].textContent = `${timeValue}`; if (timeValue == 0) {
  timerContainer[0].style.background = "teal"; clearInterval(initialIntervel); }
  }, 1000); setBreakFunc(5, 10000, 0); setTimerFunc(10, 15000, 1);
  setBreakFunc(5, 25000, 1); setTimerFunc(10, 30000, 2); setBreakFunc(5, 45000,
  2); setTimerFunc(10, 50000, 3); finishFunc(75000); const putReqObj = { putReq:
  2 }; await axios.post("/dashboard/recentactivity", putReqObj); });
  beginSetBtn.addEventListener("click", async function () { const timerInfoList
  = []; timerInfoList.push(setTimerInput.value);
  timerInfoList.push(setBreakInput.value); console.log(timerInfoList);
  timerWrapper.style.display = "block"; breakWrapper.style.display = "block";
  timerContainer[0].setAttribute("class", "animation-class");
  createBtn.setAttribute("disabled", true); createBtn.style.background = "gray";
  let timeValue = timerInfoList[0]; const timeDynamicVal = timerInfoList[0] *
  1000; const breakDynamicVal = timerInfoList[1] * 1000; const initialIntervel =
  setInterval(() => { timeValue -= 1; timeIndicator[0].textContent =
  `${timeValue}`; if (timeValue == 0) { timerContainer[0].style.background =
  "teal"; clearInterval(initialIntervel); } }, 1000);
  setBreakFunc(timerInfoList[1], timeDynamicVal, 0);
  setTimerFunc(timerInfoList[0], timeDynamicVal + breakDynamicVal, 1);
  setBreakFunc(timerInfoList[1], timeDynamicVal * 2 + breakDynamicVal, 1);
  setTimerFunc(timerInfoList[0], timeDynamicVal * 2 + breakDynamicVal * 2, 2);
  setBreakFunc(timerInfoList[1], timeDynamicVal * 3 + breakDynamicVal * 2, 2);
  setTimerFunc(timerInfoList[0], timeDynamicVal * 3 + breakDynamicVal * 3, 3);
  finishFunc(timeDynamicVal * 4 + breakDynamicVal * 3); const putReqObj = {
  putReq: 2 }; await axios.post("/dashboard/recentactivity", putReqObj); });
  resetBtn.addEventListener("click", function () { console.log("Clicked");
  createBtn.removeAttribute("disabled"); createBtn.style.background = "crimson";
  finishWrapper.style.display = "none"; });

</script>